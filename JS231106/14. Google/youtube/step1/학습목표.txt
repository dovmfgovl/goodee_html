해커뉴스 API 활용한 실습의 두 번째 버전.
step1 단계
1. 외부 서버를 활용하는 연습이다.
2. 비동기 통신 객체를 활용하여 처리해본다. - XMLHttpRequest
3. Restful API란? - GET 방식 처리해본다.
4. 제공되는 내장객체로 속성이나 함수를 호출할 수 있다.
5. DOM API를 직접 활용하는 건 직관적이지 않다. 불편했다.
  document.createElement();
  document.XXXX();
  그래서 문자 리터럴로 다시 정의하였다.
  DOM API로 DOM을 그리지 않고 문자열(ejs 템플릿 엔진 만나게 됨)로 처리하였다 -
    : 왜냐하면 코드양은 늘어나지만 복잡도가 증가하는 건 아니어서 괜찮았다.
    : 한 눈에 몇 번째 태그에 붙는 속성인지 이벤트 함수인지 분명히 보였다.
6. document.querySelector('#root').innerHTML = 문자열로 구성된 태그들을 넣어줌
  <div id='root'>빈깡통</div>
7. const arr = [];
  : array의 내장함수인 push(), 배열에 들어있는 DOM 요소들을 한 문자열로 합침 - join('')

step2 단계
step1에서 문자열로 된 부분을 굳이 배열로 바꿔본다.
const videoList = [];
1. push - 맨 뒤에 추가하기
2. 1번을 통해서 배열에 태그를 담았다 - 배열에서 꺼내 한 문자열로 묶어준다(join()) - 디폴트가 콤마라서 빈문자열(join('')) 넣음
  태그는 브라우저가 인터프리터 역할을 함

----------- 중간점검 -----------
무엇을 위한 1단계와 2단계였나

태그와 자바스크립트(나중엔 java) 코드의 섞어쓰기를 최대한 지양
화면과 로직은 분리하는 게 좋지 않나?
1. DOM API로 할까? - 구조가 안보여서 후짐
2. 문자열로 수정할 페이지를 묶어주면 구조가 잘 보이지? - 응. but 양은 늘어남
    양은 늘어나더라도 복잡도가 증가되진 않으니 이대로 갑시다
3. handlerbas 등장 - 태그 사이에 자바, 자스 코드가 안 보임
    템플릿 엔진 : 태그 앞 뒤에 {{each documents}} 태그 중략............{{/each}}
    const temp = [];