자바스크립트는 객체지향언어가 아니야
  : 스레드 이슈 - 동기와 비동기
  : 생성자, 메소드(-클래스 안에 정의된 전역함수)가 아니다
자바스크립트는 프로토타입 기반 언어다(ES6 이전까지)
모든 객체들이 메소드와 속성들을 상속받기 위한 템플릿이다.
프로토타입 객체도 상위 프로토타입으로부터 상속받을 수도 있다.
프로토타입 체이닝이 발생한다.
  : 다른 객체에 정의된 메소드와 속성을 다른 객체에서 재사용할 수 있는 근간이다.
  ***************프로토타입 정리하기**********************
자바스크립트는 동기이다
그래서 중간에 지연사황이 발동하여도 아래로 아래로 진행이 된다.
서버측에서 받아온 정보를 담지 못했다
왜냐하면 시간차가 발생했으니까
시간 차를 극복하는 방법은 - 비동기[콜백, 프로토타입, 반환값-화면출력함]처리 하라

그런데 비동기로 처리해야 하는 경우가 있다

setTimeout함수(1:콜백, 2:시간(ms)) - 지연 - await
강제로 지연상황을 연출해보았다
1
2
3 순서를 보장받고 싶다면 비동기 처리 해야한다

어떤 경우 지연될까?
- 날씨정보를 서버(http프로토콜 - 네트워크 - IO - dead lock - 재시작)로부터 받아온다
- OMDB API : 영화정보 요청(키와 frozen-파라미터-누가?-유저가) - 응답(성공(resolve), 실패(reject-에러 핸들링))

지연 처리할 수 있는 키워드
  1. setTimeout : 후짐
  2. Promise : 에러핸들링 기법, 코드 전개 모방하기!!!!!!!!!!
  3. async & await
  4. Fetch

콜백함수 자리함 - 두번째 인자만큼의 지연 후에 실행됨

프로세스가 많아질수록 setTimeout이 중첩되어갔고
또 들여쓰기도 depth 자꾸만 깊어져서
가독성이 떨어지고 유지보수도 어렵다

개선할 수 있는 방법?

-Promise : 반복되는 코드를 줄이고, 보다는 가독성도 괜찮은 편

Promise
성공 시 - resolve - 반환타입은 JSON인가? 아님 Object인가?
실패 시 - reject - 에러핸들링은 어떻게 처리할 수 있을까?

기본예제에서 영화예제까지 관찰했다.
  1. fetch 함수는 반드시 html문서 필요하다
  2. fetch 함수 반환타입이 Promise라는 걸 알게 되었다
    Promise는 다음 중 하나의 상태(변하니까 상태라고 함)를 가집니다.
      대기(pending): 이행하지도, 거부하지도 않은 초기 상태. - 결과 바랄 수 없다 - 애매모호함
        : 코딩을 덜 작성한 것
      이행(fulfilled): 연산이 성공적으로 완료됨. - 200 OK상태, success 상태-후처리 진행한다.
        : 영화예제에서 전처리는 뭐였지? - 영화제목을 입력받는 일
      거부(rejected): 연산이 실패함.
        // 인자가 함수라는 건 실행문을 가질 수 있다는 것
        // {} 묶을 수 있다 - 코드가 전개되기 시작함 - 첫 단추
        // reject()는 에러를 핸들링 할 수 있다 -> try..catch 블록 -> 이걸 안하면 고객이 403번을 날 것으로 보게 됨
        // 화면처리 - 순서가 중요하다
        //  java - 생성자 안에서 initDisplay() 호출
        //  영화정보를 조건 검색하는데 화면이 먼저인가? fetch처리가 먼저인가?
        //  자바스크립트는 먼저 흘러간다 - 화면이 그려지는게 먼저 - 그런데 영화정보가 없는 화면이다
        //    문제제기 - 비동기로 처리해야 된다
        : new Promise((resolve, reject))