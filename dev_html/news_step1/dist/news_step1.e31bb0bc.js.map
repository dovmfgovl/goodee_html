{"version":3,"sources":["index.js"],"names":["ajax","XMLHttpRequest","NEWS_URL","open","send","newsList","JSON","parse","response","console","log","ul","document","createElement","i","length","li","innerHTML","title","appendChild","getElementById"],"mappings":"AAAA;AACA;AACA,IAAMA,IAAI,GAAG,IAAIC,cAAc,CAAC,CAAC,CAAC,CAAC;AACnC,IAAMC,QAAQ,GAAG,sCAAsC;AACvD;AACA;AACA;AACAF,IAAI,CAACG,IAAI,CAAC,KAAK,EAAED,QAAQ,EAAE,KAAK,CAAC;AACjCF,IAAI,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;;AAEb,IAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACP,IAAI,CAACQ,QAAQ,CAAC,CAAC,CAAC;AAC5CC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC,CAAC,CAAC;AACvB,IAAMM,EAAE,GAAGC,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;AACzC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACT,QAAQ,CAACU,MAAM,EAAED,CAAC,EAAE,EAAC;EAClC,IAAME,EAAE,GAAGJ,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;EACvC;EACAG,EAAE,CAACC,SAAS,GAAGZ,QAAQ,CAACS,CAAC,CAAC,CAACI,KAAK;EAChCP,EAAE,CAACQ,WAAW,CAACH,EAAE,CAAC;AACpB,CAAC;AACDJ,QAAQ,CAACQ,cAAc,CAAC,MAAM,CAAC,CAACD,WAAW,CAACR,EAAE,CAAC","file":"news_step1.e31bb0bc.js","sourceRoot":"..","sourcesContent":["// console.log('hello parcel');\r\n//const 선언은 블록 범위의 상수를 선언합니다. 상수의 값은 재할당할 수 없으며 다시 선언할 수도 없습니다.\r\nconst ajax = new XMLHttpRequest(); //브라우저가 비동기처리를 위해 제공하는 내장 객체임\r\nconst NEWS_URL = 'https://api.hnpwa.com/v0/news/1.json';\r\n//open은 XMLHttpRequest 객체가 제공하는 함수로 파라미터는 3개가 필요함\r\n//1) 전송방식 2) 요청하는 URL 3) true: 동기, false: 비동기 처리로 요청해 줌\r\n//ajax변수는 XMLHttpRequest를 참조하는 변수명임\r\najax.open('GET', NEWS_URL, false);\r\najax.send(); //send() 호출될 때 비로소 서버측에 요청이 일어남\r\n\r\nconst newsList = JSON.parse(ajax.response); //9번에서 요청했을 때 서버측의 응답을 받아오는 속성이 response임\r\nconsole.log(newsList); //서버측에서 보낸 응답을 출력해보기 - Array로 변환하여 출력해줌\r\nconst ul = document.createElement('ul'); //DOM API 가지고 태그를 만드니 직관적이지 않다. DOM Tree 그려지지 않아서.\r\nfor(let i=0; i<newsList.length; i++){\r\n  const li = document.createElement('li');\r\n  //console.log(newList[i].title);\r\n  li.innerHTML = newsList[i].title;\r\n  ul.appendChild(li);\r\n}//end of for\r\ndocument.getElementById('root').appendChild(ul);"]}